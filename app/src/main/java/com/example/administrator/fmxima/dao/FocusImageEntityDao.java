package com.example.administrator.fmxima.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.administrator.fmxima.entities.FocusImageEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOCUS_IMAGE_ENTITY".
*/
public class FocusImageEntityDao extends AbstractDao<FocusImageEntity, Long> {

    public static final String TABLENAME = "FOCUS_IMAGE_ENTITY";

    /**
     * Properties of entity FocusImageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ShortTitle = new Property(1, String.class, "shortTitle", false, "SHORT_TITLE");
        public final static Property LongTitle = new Property(2, String.class, "longTitle", false, "LONG_TITLE");
        public final static Property Pic = new Property(3, String.class, "pic", false, "PIC");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Uid = new Property(5, String.class, "uid", false, "UID");
        public final static Property TrackId = new Property(6, String.class, "trackId", false, "TRACK_ID");
        public final static Property IsShare = new Property(7, String.class, "isShare", false, "IS_SHARE");
        public final static Property Is_External_url = new Property(8, String.class, "is_External_url", false, "IS__EXTERNAL_URL");
    };


    public FocusImageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FocusImageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOCUS_IMAGE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SHORT_TITLE\" TEXT," + // 1: shortTitle
                "\"LONG_TITLE\" TEXT," + // 2: longTitle
                "\"PIC\" TEXT," + // 3: pic
                "\"TYPE\" TEXT," + // 4: type
                "\"UID\" TEXT," + // 5: uid
                "\"TRACK_ID\" TEXT," + // 6: trackId
                "\"IS_SHARE\" TEXT," + // 7: isShare
                "\"IS__EXTERNAL_URL\" TEXT);"); // 8: is_External_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOCUS_IMAGE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FocusImageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String shortTitle = entity.getShortTitle();
        if (shortTitle != null) {
            stmt.bindString(2, shortTitle);
        }
 
        String longTitle = entity.getLongTitle();
        if (longTitle != null) {
            stmt.bindString(3, longTitle);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(4, pic);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(6, uid);
        }
 
        String trackId = entity.getTrackId();
        if (trackId != null) {
            stmt.bindString(7, trackId);
        }
 
        String isShare = entity.getIsShare();
        if (isShare != null) {
            stmt.bindString(8, isShare);
        }
 
        String is_External_url = entity.getIs_External_url();
        if (is_External_url != null) {
            stmt.bindString(9, is_External_url);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FocusImageEntity readEntity(Cursor cursor, int offset) {
        FocusImageEntity entity = new FocusImageEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // shortTitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // longTitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pic
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // uid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // trackId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // isShare
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // is_External_url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FocusImageEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShortTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLongTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPic(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTrackId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsShare(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIs_External_url(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FocusImageEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FocusImageEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
