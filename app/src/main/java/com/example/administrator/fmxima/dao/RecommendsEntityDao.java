package com.example.administrator.fmxima.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.administrator.fmxima.entities.RecommendsEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECOMMENDS_ENTITY".
*/
public class RecommendsEntityDao extends AbstractDao<RecommendsEntity, Void> {

    public static final String TABLENAME = "RECOMMENDS_ENTITY";

    /**
     * Properties of entity RecommendsEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Title = new Property(0, String.class, "title", false, "TITLE");
        public final static Property ContentType = new Property(1, String.class, "contentType", false, "CONTENT_TYPE");
        public final static Property IsFinished = new Property(2, Boolean.class, "isFinished", false, "IS_FINISHED");
        public final static Property CategoryId = new Property(3, String.class, "categoryId", false, "CATEGORY_ID");
        public final static Property Count = new Property(4, Integer.class, "count", false, "COUNT");
        public final static Property HasMore = new Property(5, Boolean.class, "hasMore", false, "HAS_MORE");
    };


    public RecommendsEntityDao(DaoConfig config) {
        super(config);
    }
    
    public RecommendsEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECOMMENDS_ENTITY\" (" + //
                "\"TITLE\" TEXT," + // 0: title
                "\"CONTENT_TYPE\" TEXT," + // 1: contentType
                "\"IS_FINISHED\" INTEGER," + // 2: isFinished
                "\"CATEGORY_ID\" TEXT," + // 3: categoryId
                "\"COUNT\" INTEGER," + // 4: count
                "\"HAS_MORE\" INTEGER);"); // 5: hasMore
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECOMMENDS_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RecommendsEntity entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindString(2, contentType);
        }
 
        Boolean isFinished = entity.getIsFinished();
        if (isFinished != null) {
            stmt.bindLong(3, isFinished ? 1L: 0L);
        }
 
        String categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindString(4, categoryId);
        }
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(5, count);
        }
 
        Boolean hasMore = entity.getHasMore();
        if (hasMore != null) {
            stmt.bindLong(6, hasMore ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public RecommendsEntity readEntity(Cursor cursor, int offset) {
        RecommendsEntity entity = new RecommendsEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // title
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // contentType
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // isFinished
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // categoryId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // count
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // hasMore
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RecommendsEntity entity, int offset) {
        entity.setTitle(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setContentType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsFinished(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setCategoryId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setHasMore(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(RecommendsEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(RecommendsEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
