package com.example.administrator.fmxima.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.administrator.fmxima.entities.BulletAreaEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BULLET_AREA_ENTITY".
*/
public class BulletAreaEntityDao extends AbstractDao<BulletAreaEntity, Long> {

    public static final String TABLENAME = "BULLET_AREA_ENTITY";

    /**
     * Properties of entity BulletAreaEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TrackId = new Property(0, Long.class, "trackId", true, "TRACK_ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property CoverMiddle = new Property(2, String.class, "coverMiddle", false, "COVER_MIDDLE");
        public final static Property Tags = new Property(3, String.class, "tags", false, "TAGS");
        public final static Property PlayPath32 = new Property(4, String.class, "playPath32", false, "PLAY_PATH32");
        public final static Property PlayPath64 = new Property(5, String.class, "playPath64", false, "PLAY_PATH64");
        public final static Property AlbumId = new Property(6, String.class, "albumId", false, "ALBUM_ID");
        public final static Property AlbumTitle = new Property(7, String.class, "albumTitle", false, "ALBUM_TITLE");
        public final static Property FavoritesCounts = new Property(8, String.class, "favoritesCounts", false, "FAVORITES_COUNTS");
        public final static Property PlaysCounts = new Property(9, String.class, "playsCounts", false, "PLAYS_COUNTS");
        public final static Property CommentsCounts = new Property(10, String.class, "commentsCounts", false, "COMMENTS_COUNTS");
        public final static Property SharesCounts = new Property(11, String.class, "sharesCounts", false, "SHARES_COUNTS");
    };


    public BulletAreaEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BulletAreaEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BULLET_AREA_ENTITY\" (" + //
                "\"TRACK_ID\" INTEGER PRIMARY KEY ," + // 0: trackId
                "\"TITLE\" TEXT," + // 1: title
                "\"COVER_MIDDLE\" TEXT," + // 2: coverMiddle
                "\"TAGS\" TEXT," + // 3: tags
                "\"PLAY_PATH32\" TEXT," + // 4: playPath32
                "\"PLAY_PATH64\" TEXT," + // 5: playPath64
                "\"ALBUM_ID\" TEXT," + // 6: albumId
                "\"ALBUM_TITLE\" TEXT," + // 7: albumTitle
                "\"FAVORITES_COUNTS\" TEXT," + // 8: favoritesCounts
                "\"PLAYS_COUNTS\" TEXT," + // 9: playsCounts
                "\"COMMENTS_COUNTS\" TEXT," + // 10: commentsCounts
                "\"SHARES_COUNTS\" TEXT);"); // 11: sharesCounts
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BULLET_AREA_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BulletAreaEntity entity) {
        stmt.clearBindings();
 
        Long trackId = entity.getTrackId();
        if (trackId != null) {
            stmt.bindLong(1, trackId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String coverMiddle = entity.getCoverMiddle();
        if (coverMiddle != null) {
            stmt.bindString(3, coverMiddle);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(4, tags);
        }
 
        String playPath32 = entity.getPlayPath32();
        if (playPath32 != null) {
            stmt.bindString(5, playPath32);
        }
 
        String playPath64 = entity.getPlayPath64();
        if (playPath64 != null) {
            stmt.bindString(6, playPath64);
        }
 
        String albumId = entity.getAlbumId();
        if (albumId != null) {
            stmt.bindString(7, albumId);
        }
 
        String albumTitle = entity.getAlbumTitle();
        if (albumTitle != null) {
            stmt.bindString(8, albumTitle);
        }
 
        String favoritesCounts = entity.getFavoritesCounts();
        if (favoritesCounts != null) {
            stmt.bindString(9, favoritesCounts);
        }
 
        String playsCounts = entity.getPlaysCounts();
        if (playsCounts != null) {
            stmt.bindString(10, playsCounts);
        }
 
        String commentsCounts = entity.getCommentsCounts();
        if (commentsCounts != null) {
            stmt.bindString(11, commentsCounts);
        }
 
        String sharesCounts = entity.getSharesCounts();
        if (sharesCounts != null) {
            stmt.bindString(12, sharesCounts);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BulletAreaEntity readEntity(Cursor cursor, int offset) {
        BulletAreaEntity entity = new BulletAreaEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // trackId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // coverMiddle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tags
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // playPath32
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // playPath64
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // albumId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // albumTitle
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // favoritesCounts
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // playsCounts
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // commentsCounts
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // sharesCounts
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BulletAreaEntity entity, int offset) {
        entity.setTrackId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCoverMiddle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTags(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPlayPath32(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPlayPath64(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAlbumId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAlbumTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFavoritesCounts(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPlaysCounts(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCommentsCounts(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSharesCounts(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BulletAreaEntity entity, long rowId) {
        entity.setTrackId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BulletAreaEntity entity) {
        if(entity != null) {
            return entity.getTrackId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
