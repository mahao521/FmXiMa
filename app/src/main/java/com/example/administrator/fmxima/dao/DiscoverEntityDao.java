package com.example.administrator.fmxima.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.administrator.fmxima.entities.DiscoverEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DISCOVER_ENTITY".
*/
public class DiscoverEntityDao extends AbstractDao<DiscoverEntity, Long> {

    public static final String TABLENAME = "DISCOVER_ENTITY";

    /**
     * Properties of entity DiscoverEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderNum = new Property(1, String.class, "orderNum", false, "ORDER_NUM");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Subtitle = new Property(3, String.class, "subtitle", false, "SUBTITLE");
        public final static Property CoverPath = new Property(4, String.class, "coverPath", false, "COVER_PATH");
        public final static Property ContentType = new Property(5, String.class, "contentType", false, "CONTENT_TYPE");
        public final static Property Url = new Property(6, String.class, "url", false, "URL");
        public final static Property SharePic = new Property(7, String.class, "sharePic", false, "SHARE_PIC");
        public final static Property EnableShare = new Property(8, Boolean.class, "enableShare", false, "ENABLE_SHARE");
        public final static Property IsHot = new Property(9, Boolean.class, "isHot", false, "IS_HOT");
        public final static Property IsExternalUrl = new Property(10, Boolean.class, "isExternalUrl", false, "IS_EXTERNAL_URL");
        public final static Property ContentUpdatedAt = new Property(11, String.class, "contentUpdatedAt", false, "CONTENT_UPDATED_AT");
    };


    public DiscoverEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DiscoverEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISCOVER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ORDER_NUM\" TEXT," + // 1: orderNum
                "\"TITLE\" TEXT," + // 2: title
                "\"SUBTITLE\" TEXT," + // 3: subtitle
                "\"COVER_PATH\" TEXT," + // 4: coverPath
                "\"CONTENT_TYPE\" TEXT," + // 5: contentType
                "\"URL\" TEXT," + // 6: url
                "\"SHARE_PIC\" TEXT," + // 7: sharePic
                "\"ENABLE_SHARE\" INTEGER," + // 8: enableShare
                "\"IS_HOT\" INTEGER," + // 9: isHot
                "\"IS_EXTERNAL_URL\" INTEGER," + // 10: isExternalUrl
                "\"CONTENT_UPDATED_AT\" TEXT);"); // 11: contentUpdatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISCOVER_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DiscoverEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderNum = entity.getOrderNum();
        if (orderNum != null) {
            stmt.bindString(2, orderNum);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String subtitle = entity.getSubtitle();
        if (subtitle != null) {
            stmt.bindString(4, subtitle);
        }
 
        String coverPath = entity.getCoverPath();
        if (coverPath != null) {
            stmt.bindString(5, coverPath);
        }
 
        String contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindString(6, contentType);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
 
        String sharePic = entity.getSharePic();
        if (sharePic != null) {
            stmt.bindString(8, sharePic);
        }
 
        Boolean enableShare = entity.getEnableShare();
        if (enableShare != null) {
            stmt.bindLong(9, enableShare ? 1L: 0L);
        }
 
        Boolean isHot = entity.getIsHot();
        if (isHot != null) {
            stmt.bindLong(10, isHot ? 1L: 0L);
        }
 
        Boolean isExternalUrl = entity.getIsExternalUrl();
        if (isExternalUrl != null) {
            stmt.bindLong(11, isExternalUrl ? 1L: 0L);
        }
 
        String contentUpdatedAt = entity.getContentUpdatedAt();
        if (contentUpdatedAt != null) {
            stmt.bindString(12, contentUpdatedAt);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DiscoverEntity readEntity(Cursor cursor, int offset) {
        DiscoverEntity entity = new DiscoverEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // subtitle
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // coverPath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // contentType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sharePic
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // enableShare
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isHot
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // isExternalUrl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // contentUpdatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DiscoverEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSubtitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCoverPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContentType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSharePic(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEnableShare(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIsHot(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setIsExternalUrl(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setContentUpdatedAt(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DiscoverEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DiscoverEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
